{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for My Courses block.\n *\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Repository from 'block_mycourses/repository';\nimport * as PagedContentFactory from 'core/paged_content_factory';\nimport * as PubSub from 'core/pubsub';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport * as Notification from 'core/notification';\nimport * as Templates from 'core/templates';\nimport * as CourseEvents from 'core_course/events';\nimport SELECTORS from 'block_mycourses/selectors';\nimport * as PagedContentEvents from 'core/paged_content_events';\nimport * as Aria from 'core/aria';\nimport {debounce} from 'core/utils';\nimport {setUserPreference} from 'core_user/repository';\n\nconst TEMPLATES = {\n    COURSES_CARDS: 'block_mycourses/view-cards',\n    COURSES_LIST: 'block_mycourses/view-list',\n    COURSES_SUMMARY: 'block_mycourses/view-summary',\n    NOCOURSES: 'core_course/no-courses'\n};\n\nconst GROUPINGS = {\n    GROUPING_ALLINCLUDINGHIDDEN: 'allincludinghidden',\n    GROUPING_ALL: 'all',\n    GROUPING_INPROGRESS: 'inprogress',\n    GROUPING_FUTURE: 'future',\n    GROUPING_PAST: 'past',\n    GROUPING_FAVOURITES: 'favourites',\n    GROUPING_HIDDEN: 'hidden'\n};\n\nconst NUMCOURSES_PERPAGE = [5, 10, 15, 20, 0];\n\nconst ROLE_TEACHER = 'teacher';\n\nlet instances = [];\n\n/**\n * Get filter values from DOM.\n *\n * @param {object} root The root element for the courses view.\n * @return {filters} Set filters.\n */\nconst getFilterValues = root => {\n    const courseRegion = root.find(SELECTORS.courseView.region);\n    return {\n        role: courseRegion.attr('data-user-role'),\n        display: courseRegion.attr('data-display'),\n        grouping: courseRegion.attr('data-grouping'),\n        sort: courseRegion.attr('data-sort'),\n        displaycategories: courseRegion.attr('data-displaycategories'),\n        customfieldname: courseRegion.attr('data-customfieldname'),\n        customfieldvalue: courseRegion.attr('data-customfieldvalue'),\n    };\n};\n\n/**\n * Get enrolled courses from backend.\n *\n * @param {Object} root The container for My Courses\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @return {promise} Resolved with an array of courses.\n */\nconst getMyCourses = (root, filters, limit) => {\n    return Repository.getEnrolledCoursesByRole({\n        role: filters.role,\n        offset: instances[root.attr('id')]['courseOffset'],\n        limit: limit,\n        classification: filters.grouping,\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue\n    });\n};\n\n/**\n * Search for enrolled courses from backend.\n *\n * @param {Object} root The container for My Courses\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @param {string} searchValue What does the user want to search within their courses.\n * @return {promise} Resolved with an array of courses.\n */\nconst getSearchMyCourses = (root, filters, limit, searchValue) => {\n    return Repository.getEnrolledCoursesByRole({\n        role: filters.role,\n        offset: instances[root.attr('id')]['courseOffset'],\n        limit: limit,\n        classification: 'search',\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue,\n        searchvalue: searchValue\n    });\n};\n\n/**\n * Get the container element for the favourite icon.\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id number\n * @return {Object} The favourite icon container\n */\nconst getFavouriteIconContainer = (root, courseId) => {\n    return root.find(SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the paged content container element.\n *\n * @param {Object} root The container for My Courses\n * @param {Number} index Rendered page index.\n * @return {Object} The rendered paged container.\n */\nconst getPagedContentContainer = (root, index) => {\n    return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n};\n\n/**\n * Get the course id from a favourite element.\n *\n * @param {Object} root The favourite icon container element.\n * @return {Number} Course id.\n */\nconst getCourseId = root => {\n    return root.attr('data-course-id');\n};\n\n/**\n * Hide the favourite icon.\n *\n * @param {Object} root The favourite icon container element.\n * @param {Number} courseId Course id number.\n */\nconst hideFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.addClass('hidden');\n    Aria.hide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.removeClass('hidden');\n    Aria.unhide(notFavourteIcon);\n};\n\n/**\n * Show the favourite icon.\n *\n * @param {Object} root The container for My Courses.\n * @param {Number} courseId Course id number.\n */\nconst showFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.removeClass('hidden');\n    Aria.unhide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.addClass('hidden');\n    Aria.hide(notFavourteIcon);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id.\n * @return {Object} The add to favourite menu item.\n */\nconst getAddFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id.\n * @return {Object} The remove from favourites menu item.\n */\nconst getRemoveFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Add course to favourites\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id number\n */\nconst addToFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(root, courseId, true).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.favourited, courseId);\n            removeAction.removeClass('hidden');\n            addAction.addClass('hidden');\n            showFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Remove course from favourites\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id number\n */\nconst removeFromFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(root, courseId, false).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.unfavorited, courseId);\n            removeAction.addClass('hidden');\n            addAction.removeClass('hidden');\n            hideFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id.\n * @return {Object} The hide course menu item.\n */\nconst getHideCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id.\n * @return {Object} The show course menu item.\n */\nconst getShowCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Hide course\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id number\n */\nconst hideCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, true);\n\n    // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.addClass('hidden');\n    showAction.removeClass('hidden');\n};\n\n/**\n * Show course\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id number\n */\nconst showCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, null);\n\n    // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.removeClass('hidden');\n    showAction.addClass('hidden');\n};\n\n/**\n * Set the courses hidden status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {Boolean} status new hidden status.\n * @return {Promise} Repository promise.\n */\nconst setCourseHiddenState = (courseId, status) => {\n\n    // If the given status is not hidden, the preference has to be deleted with a null value.\n    if (status === false) {\n        status = null;\n    }\n\n    return setUserPreference(`block_mycourses_hidden_course_${courseId}`, status)\n        .catch(Notification.exception);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id.\n * @return {Object} The make invisible course menu item.\n */\nconst getInvisibleCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"invisible-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id.\n * @return {Object} The make visible course menu item.\n */\nconst getVisibleCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"visible-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Make course invisible\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id number\n */\nconst invisibleCourse = (root, courseId) => {\n    const hideAction = getInvisibleCourseMenuItem(root, courseId);\n    const showAction = getVisibleCourseMenuItem(root, courseId);\n\n    setCourseInvisibleState(root, courseId, 0).then(success => {\n        if (success) {\n            hideAction.addClass('hidden');\n            showAction.removeClass('hidden');\n            reset(root);\n        } else {\n            Notification.alert('Hiding course failed', 'Could not change visibility state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Make course visible\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id number\n */\nconst visibleCourse = (root, courseId) => {\n    const hideAction = getInvisibleCourseMenuItem(root, courseId);\n    const showAction = getVisibleCourseMenuItem(root, courseId);\n\n    setCourseInvisibleState(root, courseId, 1).then(success => {\n        if (success) {\n            hideAction.removeClass('hidden');\n            showAction.addClass('hidden');\n            reset(root);\n        } else {\n            Notification.alert('Showing course failed', 'Could not change visibility state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Set the courses visibility and push to repository\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id.\n * @param {Number} status new visibility.\n * @return {Promise} Repository promise.\n */\nconst setCourseInvisibleState = (root, courseId, status) => {\n    return Repository.setInvisibilityCourse({\n        courses: [\n            {\n                'id': courseId,\n                'visible': status\n            }\n        ]\n    }).then(result => {\n        if (result.warnings.length === 0) {\n            instances[root.attr('id')]['loadedPages'].forEach(courseList => {\n                courseList.courses.forEach((course, index) => {\n                    if (course.id == courseId) {\n                        courseList.courses[index].visible = status;\n                    }\n                });\n            });\n            return true;\n        } else {\n            return false;\n        }\n    }).catch(Notification.exception);\n};\n\n/**\n * Reset the loadedPages dataset to take into account the hidden element\n *\n * @param {Object} root The container for My Courses\n * @param {Number} id The course id number\n */\nconst hideElement = (root, id) => {\n    const pagingBar = root.find('[data-region=\"paging-bar\"]');\n    const jumpto = parseInt(pagingBar.attr('data-active-page-number'));\n\n    // Get a reduced dataset for the current page.\n    const courseList = instances[root.attr('id')]['loadedPages'][jumpto];\n    let reducedCourse = courseList.courses.reduce((accumulator, current) => {\n        if (+id !== +current.id) {\n            accumulator.push(current);\n        }\n        return accumulator;\n    }, []);\n\n    // Get the next page's data if loaded and pop the first element from it.\n    if (typeof (instances[root.attr('id')]['loadedPages'][jumpto + 1]) !== 'undefined') {\n        const newElement = instances[root.attr('id')]['loadedPages'][jumpto + 1].courses.slice(0, 1);\n\n        // Adjust the dataset for the reset of the pages that are loaded.\n        instances[root.attr('id')]['loadedPages'].forEach((courseList, index) => {\n            if (index > jumpto) {\n                let popElement = [];\n                if (typeof (instances[root.attr('id')]['loadedPages'][index + 1]) !== 'undefined') {\n                    popElement = instances[root.attr('id')]['loadedPages'][index + 1].courses.slice(0, 1);\n                }\n                instances[root.attr('id')]['loadedPages'][index].courses =\n                    [...instances[root.attr('id')]['loadedPages'][index].courses.slice(1), ...popElement];\n            }\n        });\n\n        reducedCourse = [...reducedCourse, ...newElement];\n    }\n\n    // Check if the next page is the last page and if it still has data associated to it.\n    if (instances[root.attr('id')]['lastPage'] === jumpto + 1 &&\n        instances[root.attr('id')]['loadedPages'][jumpto + 1].courses.length === 0) {\n        const pagedContentContainer = root.find('[data-region=\"paged-content-container\"]');\n        PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr('id'), jumpto);\n    }\n\n    instances[root.attr('id')]['loadedPages'][jumpto].courses = reducedCourse;\n\n    // Reduce the course offset.\n    instances[root.attr('id')]['courseOffset']--;\n\n    // Render the paged content for the current.\n    const pagedContentPage = getPagedContentContainer(root, jumpto);\n    renderCourses(root, instances[root.attr('id')]['loadedPages'][jumpto]).then((html, js) => {\n        return Templates.replaceNodeContents(pagedContentPage, html, js);\n    }).catch(Notification.exception);\n\n    // Delete subsequent pages in order to trigger the callback.\n    instances[root.attr('id')]['loadedPages'].forEach((courseList, index) => {\n        if (index > jumpto) {\n            const page = getPagedContentContainer(root, index);\n            page.remove();\n        }\n    });\n};\n\n/**\n * Set the courses favourite status and push to repository\n *\n * @param {Object} root The container for My Courses\n * @param {Number} courseId Course id to favourite.\n * @param {boolean} status new favourite status.\n * @return {Promise} Repository promise.\n */\nconst setCourseFavouriteState = (root, courseId, status) => {\n\n    return Repository.setFavouriteCourses({\n        courses: [\n            {\n                'id': courseId,\n                'favourite': status\n            }\n        ]\n    }).then(result => {\n        if (result.warnings.length === 0) {\n            instances[root.attr('id')]['loadedPages'].forEach(courseList => {\n                courseList.courses.forEach((course, index) => {\n                    if (course.id == courseId) {\n                        courseList.courses[index].isfavourite = status;\n                    }\n                });\n            });\n            return true;\n        } else {\n            return false;\n        }\n    }).catch(Notification.exception);\n};\n\n/**\n * Given there are no courses to render provide the rendered template.\n *\n * @param {object} root The root element for the courses view.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst noCoursesRender = root => {\n    const nocoursesimg = root.find(SELECTORS.courseView.region).attr('data-nocoursesimg');\n    const newcourseurl = root.find(SELECTORS.courseView.region).attr('data-newcourseurl');\n    return Templates.render(TEMPLATES.NOCOURSES, {\n        nocoursesimg: nocoursesimg,\n        newcourseurl: newcourseurl\n    });\n};\n\n/**\n * Render the dashboard courses.\n *\n * @param {object} root The root element for the courses view.\n * @param {array} coursesData containing array of returned courses.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst renderCourses = (root, coursesData) => {\n\n    const filters = getFilterValues(root);\n\n    let currentTemplate = '';\n    if (filters.display === 'card') {\n        currentTemplate = TEMPLATES.COURSES_CARDS;\n    } else if (filters.display === 'list') {\n        currentTemplate = TEMPLATES.COURSES_LIST;\n    } else {\n        currentTemplate = TEMPLATES.COURSES_SUMMARY;\n    }\n\n    if (!coursesData) {\n        return noCoursesRender(root);\n    } else {\n        // Sometimes we get weird objects coming after a failed search, cast to ensure typing functions.\n        if (Array.isArray(coursesData.courses) === false) {\n            coursesData.courses = Object.values(coursesData.courses);\n        }\n\n        // Whether the course category should be displayed in the course item.\n        coursesData.courses = coursesData.courses.map(course => {\n            course.showcoursecategory = filters.displaycategories === 'on';\n            return course;\n        });\n\n        if (coursesData.courses.length) {\n            return Templates.render(currentTemplate, {\n                courses: coursesData.courses,\n            });\n        } else {\n            return noCoursesRender(root);\n        }\n    }\n};\n\n/**\n * Return the callback to be passed to the subscribe event\n *\n * @param {object} root The root element for the courses view\n * @return {function} Partially applied function that'll execute when passed a limit\n */\nconst setLimit = root => {\n    // @param {Number} limit The paged limit that is passed through the event.\n    return limit => root.find(SELECTORS.courseView.region).attr('data-paging', limit);\n};\n\n/**\n * Intialise the paged list and cards views on page load.\n * Returns an array of paged contents that we would like to handle here\n *\n * @param {object} root The root element for the courses view\n * @param {string} namespace The namespace for all the events attached\n */\nconst registerPagedEventHandlers = (root, namespace) => {\n    const event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n    PubSub.subscribe(event, setLimit(root));\n};\n\n/**\n * Figure out how many items are going to be allowed to be rendered in the block.\n *\n * @param  {Number} pagingLimit How many courses to display\n * @param  {Object} root The container for My Courses\n * @return {Number[]} How many courses will be rendered\n */\nconst itemsPerPageFunc = (pagingLimit, root) => {\n    let itemsPerPage = NUMCOURSES_PERPAGE.map(value => {\n        let active = false;\n        if (value === pagingLimit) {\n            active = true;\n        }\n\n        return {\n            value: value,\n            active: active\n        };\n    });\n\n    // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n    const totalCourseCount = parseInt(root.find(SELECTORS.courseView.region).attr('data-totalcoursecount'), 10);\n    return itemsPerPage.filter(pagingOption => {\n        if (pagingOption.value === 0 && totalCourseCount > 100) {\n            // To minimise performance issues, do not show the \"All\" option if the user is enrolled in more than 100 courses.\n            return false;\n        }\n        return pagingOption.value < totalCourseCount;\n    });\n};\n\n/**\n * Mutates and controls the loadedPages array and handles the bootstrapping.\n *\n * @param  {Object} root The container for My Courses\n * @param {Array|Object} coursesData Array of all of the courses to start building the page from\n * @param {Number} currentPage What page are we currently on?\n * @param {Object} pageData Any current page information\n * @param {Object} actions Paged content helper\n * @param {null|boolean} activeSearch Are we currently actively searching and building up search results?\n */\nconst pageBuilder = (root, coursesData, currentPage, pageData, actions, activeSearch = null) => {\n    // If the courseData comes in an object then get the value otherwise it is a pure array.\n    let courses = coursesData.courses ? coursesData.courses : coursesData;\n    let nextPageStart = 0;\n    let pageCourses = [];\n\n    // If current page's data is loaded make sure we max it to page limit.\n    if (typeof (instances[root.attr('id')]['loadedPages'][currentPage]) !== 'undefined') {\n        pageCourses = instances[root.attr('id')]['loadedPages'][currentPage].courses;\n        const currentPageLength = pageCourses.length;\n        if (currentPageLength < pageData.limit) {\n            nextPageStart = pageData.limit - currentPageLength;\n            pageCourses = {...instances[root.attr('id')]['loadedPages'][currentPage].courses, ...courses.slice(0, nextPageStart)};\n        }\n    } else {\n        // When the page limit is zero, there is only one page of courses, no start for next page.\n        nextPageStart = pageData.limit || false;\n        pageCourses = (pageData.limit > 0) ? courses.slice(0, pageData.limit) : courses;\n    }\n\n    // Finished setting up the current page.\n    instances[root.attr('id')]['loadedPages'][currentPage] = {\n        courses: pageCourses\n    };\n\n    // Set up the next page (if there is more than one page).\n    const remainingCourses = nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n    if (remainingCourses.length) {\n        instances[root.attr('id')]['loadedPages'][currentPage + 1] = {\n            courses: remainingCourses\n        };\n    }\n\n    // Set the last page to either the current or next page.\n    if (instances[root.attr('id')]['loadedPages'][currentPage].courses.length < pageData.limit || !remainingCourses.length) {\n        instances[root.attr('id')]['lastPage'] = currentPage;\n        if (activeSearch === null) {\n            actions.allItemsLoaded(currentPage);\n        }\n    } else if (typeof (instances[root.attr('id')]['loadedPages'][currentPage + 1]) !== 'undefined'\n        && instances[root.attr('id')]['loadedPages'][currentPage + 1].courses.length < pageData.limit) {\n        instances[root.attr('id')]['lastPage'] = currentPage + 1;\n    }\n\n    instances[root.attr('id')]['courseOffset'] = coursesData.nextoffset;\n};\n\n/**\n * In cases when switching between regular rendering and search rendering we need to reset some variables.\n * @param {Object} root The mycourses block container element.\n */\nconst resetGlobals = (root) => {\n    instances[root.attr('id')]['courseOffset'] = 0;\n    instances[root.attr('id')]['loadedPages'] = [];\n    instances[root.attr('id')]['lastPage'] = 0;\n    instances[root.attr('id')]['lastLimit'] = 0;\n};\n\n/**\n * The default functionality of fetching paginated courses without special handling.\n *\n * @param {Object} root The mycourses block container element.\n * @return {function(Object, Object, Object, Object, Object, Promise, Number): void}\n */\nconst standardFunctionalityCurry = (root) => {\n    resetGlobals(root);\n    return (filters, currentPage, pageData, actions, root, promises, limit) => {\n        const pagePromise = getMyCourses(\n            root,\n            filters,\n            limit\n        ).then(coursesData => {\n            pageBuilder(root, coursesData, currentPage, pageData, actions);\n            return renderCourses(root, instances[root.attr('id')]['loadedPages'][currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(pagePromise);\n    };\n};\n\n/**\n * Initialize the searching functionality so we can call it when required.\n *\n * @param {Object} root The mycourses block container element.\n * @return {function(Object, Number, Object, Object, Object, Promise, Number, String): void}\n */\nconst searchFunctionalityCurry = (root) => {\n    resetGlobals(root);\n    return (filters, currentPage, pageData, actions, root, promises, limit, inputValue) => {\n        const searchingPromise = getSearchMyCourses(\n            root,\n            filters,\n            limit,\n            inputValue\n        ).then(coursesData => {\n            pageBuilder(root, coursesData, currentPage, pageData, actions);\n            return renderCourses(root, instances[root.attr('id')]['loadedPages'][currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(searchingPromise);\n    };\n};\n\n/**\n * Initialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n * @param {function} promiseFunction How do we fetch the courses and what do we do with them?\n * @param {null | string} inputValue What to search for\n */\nconst initializePagedContent = (root, promiseFunction, inputValue = null) => {\n    const pagingLimit = parseInt(root.find(SELECTORS.courseView.region).attr('data-paging'), 10);\n    let itemsPerPage = itemsPerPageFunc(pagingLimit, root);\n\n    // We want the paged content controls below the paged content area.\n    // and the controls should be ignored while data is loading.\n    let default_paged_content_config = {\n        ignoreControlWhileLoading: true,\n        controlPlacementBottom: true,\n        persistentLimitKey: 'block_mycourses_user_paging_preference_' + root.attr(SELECTORS.INSTANCE)\n    };\n\n    const filters = getFilterValues(root);\n    const config = {...{}, ...default_paged_content_config};\n    config.eventNamespace = instances[root.attr('id')]['namespace'];\n\n    const pagedContentPromise = PagedContentFactory.createWithLimit(\n        itemsPerPage,\n        (pagesData, actions) => {\n            let promises = [];\n            pagesData.forEach(pageData => {\n                const currentPage = pageData.pageNumber;\n                let limit = (pageData.limit > 0) ? pageData.limit : 0;\n\n                // Reset local variables if limits have changed.\n                if (+instances[root.attr('id')]['lastLimit'] !== +limit) {\n                    instances[root.attr('id')]['loadedPages'] = [];\n                    instances[root.attr('id')]['courseOffset'] = 0;\n                    instances[root.attr('id')]['lastPage'] = 0;\n                }\n\n                if (instances[root.attr('id')]['lastPage'] === currentPage) {\n                    // If we are on the last page and have it's data then load it from cache.\n                    actions.allItemsLoaded(instances[root.attr('id')]['lastPage']);\n                    promises.push(renderCourses(root, instances[root.attr('id')]['loadedPages'][currentPage]));\n                    return;\n                }\n\n                instances[root.attr('id')]['lastLimit'] = limit;\n\n                // Get 2 pages worth of data as we will need it for the hidden functionality.\n                if (typeof (instances[root.attr('id')]['loadedPages'][currentPage + 1]) === 'undefined') {\n                    if (typeof (instances[root.attr('id')]['loadedPages'][currentPage]) === 'undefined') {\n                        limit *= 2;\n                    }\n                }\n\n                // Call the curried function that'll handle the course promise and any manipulation of it.\n                promiseFunction(filters, currentPage, pageData, actions, root, promises, limit, inputValue);\n            });\n            return promises;\n        },\n        config\n    );\n\n    pagedContentPromise.then((html, js) => {\n        registerPagedEventHandlers(root, instances[root.attr('id')]['namespace']);\n        return Templates.replaceNodeContents(root.find(SELECTORS.courseView.region), html, js);\n    }).catch(Notification.exception);\n};\n\n/**\n * Listen to, and handle events for the mycourses block.\n *\n * @param {Object} root The mycourses block container element.\n * @param {HTMLElement} page The whole HTMLElement for our block.\n */\nconst registerEventListeners = (root, page) => {\n\n    CustomEvents.define(root, [\n        CustomEvents.events.activate\n    ]);\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_ADD_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        addToFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_REMOVE_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        removeFromFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, (e, data) => {\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_HIDE_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n        const courseId = getCourseId(target);\n        hideCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_SHOW_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n        const courseId = getCourseId(target);\n        showCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    // Searching functionality event handlers.\n    const input = page.querySelector(SELECTORS.region.searchInput);\n    const clearIcon = page.querySelector(SELECTORS.region.clearIcon);\n\n    clearIcon.addEventListener('click', () => {\n        input.value = '';\n        input.focus();\n        clearSearch(clearIcon, root);\n    });\n\n    input.addEventListener('input', debounce(() => {\n        if (input.value === '') {\n            clearSearch(clearIcon, root);\n        } else {\n            activeSearch(clearIcon);\n            initializePagedContent(root, searchFunctionalityCurry(root), input.value.trim());\n        }\n    }, 1000));\n};\n\n/**\n * Listen to, and handle events for the mycourses block.\n *\n * @param {Object} root The mycourses block container element.\n * @param {HTMLElement} page The whole HTMLElement for our block.\n */\nconst registerTeacherEventListeners = (root, page) => {\n\n    CustomEvents.define(root, [\n        CustomEvents.events.activate\n    ]);\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_INVISIBLE_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_INVISIBLE_COURSE);\n        const courseId = getCourseId(target);\n        invisibleCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_VISIBLE_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_VISIBLE_COURSE);\n        const courseId = getCourseId(target);\n        visibleCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    // Searching functionality event handlers.\n    const input = page.querySelector(SELECTORS.region.searchInput);\n    const clearIcon = page.querySelector(SELECTORS.region.clearIcon);\n\n    clearIcon.addEventListener('click', () => {\n        input.value = '';\n        input.focus();\n        clearSearch(clearIcon, root);\n    });\n\n    input.addEventListener('input', debounce(() => {\n        if (input.value === '') {\n            clearSearch(clearIcon, root);\n        } else {\n            activeSearch(clearIcon);\n            initializePagedContent(root, searchFunctionalityCurry(root), input.value.trim());\n        }\n    }, 1000));\n};\n\n/**\n * Reset the search icon and trigger the init for the block.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n * @param {Object} root The mycourses block container element.\n */\nexport const clearSearch = (clearIcon, root) => {\n    clearIcon.classList.add('d-none');\n    init(root);\n};\n\n/**\n * Change the searching icon to its' active state.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n */\nconst activeSearch = (clearIcon) => {\n    clearIcon.classList.remove('d-none');\n};\n\n/**\n * Intialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n */\nexport const init = root => {\n    root = $(root);\n\n    instances[root.attr('id')] = [];\n    instances[root.attr('id')]['loadedPages'] = [];\n    instances[root.attr('id')]['lastPage'] = 0;\n    instances[root.attr('id')]['courseOffset'] = 0;\n\n    const courseRegion = root.find(SELECTORS.courseView.region);\n    let role = courseRegion.attr('data-user-role');\n\n    if (!root.attr('data-init')) {\n        const page = document.querySelector('#' + root.attr('id') + SELECTORS.region.selectBlock);\n        if (role !== ROLE_TEACHER) {\n            registerEventListeners(root, page);\n        } else {\n            registerTeacherEventListeners(root, page);\n        }\n\n        instances[root.attr('id')]['namespace'] = \"block_mycourses_\" + root.attr('id') + \"_\" + Math.random();\n        root.attr('data-init', true);\n    }\n\n    initializePagedContent(root, standardFunctionalityCurry(root));\n};\n\n/**\n * Reset the courses views to their original\n * state on first page load.courseOffset\n *\n * This is called when configuration has changed for the event lists\n * to cause them to reload their data.\n *\n * @param {Object} root The root element for the timeline view.\n */\nexport const reset = root => {\n    if (instances[root.attr('id')]['loadedPages'].length > 0) {\n        instances[root.attr('id')]['loadedPages'].forEach((courseList, index) => {\n            let pagedContentPage = getPagedContentContainer(root, index);\n            renderCourses(root, courseList).then((html, js) => {\n                return Templates.replaceNodeContents(pagedContentPage, html, js);\n            }).catch(Notification.exception);\n        });\n    } else {\n        init(root);\n    }\n};\n"],"names":["TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","instances","getFilterValues","root","courseRegion","find","SELECTORS","courseView","region","role","attr","display","grouping","sort","displaycategories","customfieldname","customfieldvalue","getFavouriteIconContainer","courseId","FAVOURITE_ICON","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","then","success","PubSub","publish","CourseEvents","favourited","removeClass","addClass","iconContainer","isFavouriteIcon","ICON_IS_FAVOURITE","Aria","unhide","notFavourteIcon","ICON_NOT_FAVOURITE","hide","showFavouriteIcon","Notification","alert","catch","exception","removeFromFavourites","unfavorited","hideFavouriteIcon","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","getInvisibleCourseMenuItem","getVisibleCourseMenuItem","setCourseInvisibleState","Repository","setInvisibilityCourse","courses","result","warnings","length","forEach","courseList","course","id","visible","hideElement","pagingBar","jumpto","parseInt","reducedCourse","reduce","accumulator","current","push","newElement","slice","popElement","pagedContentContainer","PagedContentFactory","resetLastPageNumber","pagedContentPage","renderCourses","html","js","Templates","replaceNodeContents","remove","setFavouriteCourses","isfavourite","noCoursesRender","nocoursesimg","newcourseurl","render","coursesData","filters","currentTemplate","Array","isArray","Object","values","map","showcoursecategory","registerPagedEventHandlers","namespace","event","PagedContentEvents","SET_ITEMS_PER_PAGE_LIMIT","subscribe","limit","setLimit","itemsPerPageFunc","pagingLimit","itemsPerPage","value","active","totalCourseCount","filter","pagingOption","pageBuilder","currentPage","pageData","actions","activeSearch","nextPageStart","pageCourses","currentPageLength","remainingCourses","allItemsLoaded","nextoffset","resetGlobals","standardFunctionalityCurry","promises","pagePromise","getEnrolledCoursesByRole","offset","classification","getMyCourses","searchFunctionalityCurry","inputValue","searchingPromise","searchValue","searchvalue","getSearchMyCourses","initializePagedContent","promiseFunction","default_paged_content_config","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","INSTANCE","config","eventNamespace","pagedContentPromise","createWithLimit","pagesData","pageNumber","registerEventListeners","page","CustomEvents","define","events","activate","on","ACTION_ADD_FAVOURITE","e","data","favourite","target","closest","originalEvent","preventDefault","ACTION_REMOVE_FAVOURITE","ACTION_HIDE_COURSE","hideAction","showAction","hideCourse","ACTION_SHOW_COURSE","showCourse","input","querySelector","searchInput","clearIcon","addEventListener","focus","clearSearch","trim","registerTeacherEventListeners","ACTION_INVISIBLE_COURSE","reset","invisibleCourse","ACTION_VISIBLE_COURSE","visibleCourse","classList","add","init","document","selectBlock","Math","random"],"mappings":";;;;;;ipBAoCMA,wBACa,6BADbA,uBAEY,4BAFZA,0BAGe,+BAHfA,oBAIS,yBAGTC,sCAC2B,qBAS3BC,mBAAqB,CAAC,EAAG,GAAI,GAAI,GAAI,OAIvCC,UAAY,SAQVC,gBAAkBC,aACdC,aAAeD,KAAKE,KAAKC,mBAAUC,WAAWC,cAC7C,CACHC,KAAML,aAAaM,KAAK,kBACxBC,QAASP,aAAaM,KAAK,gBAC3BE,SAAUR,aAAaM,KAAK,iBAC5BG,KAAMT,aAAaM,KAAK,aACxBI,kBAAmBV,aAAaM,KAAK,0BACrCK,gBAAiBX,aAAaM,KAAK,wBACnCM,iBAAkBZ,aAAaM,KAAK,2BAqDtCO,0BAA4B,CAACd,KAAMe,WAC9Bf,KAAKE,KAAKC,mBAAUa,eAAiB,oBAAsBD,SAAW,MAU3EE,yBAA2B,CAACjB,KAAMkB,QAC7BlB,KAAKE,KAAK,iDAAmDgB,MAAQ,MAS1EC,YAAcnB,MACTA,KAAKO,KAAK,kBA8Cfa,wBAA0B,CAACpB,KAAMe,WAC5Bf,KAAKE,KAAK,iDAAmDa,SAAW,MAU7EM,2BAA6B,CAACrB,KAAMe,WAC/Bf,KAAKE,KAAK,oDAAsDa,SAAW,MAShFO,gBAAkB,CAACtB,KAAMe,kBACrBQ,aAAeF,2BAA2BrB,KAAMe,UAChDS,UAAYJ,wBAAwBpB,KAAMe,UAEhDU,wBAAwBzB,KAAMe,UAAU,GAAMW,MAAKC,UAC3CA,SACAC,OAAOC,QAAQC,aAAaC,WAAYhB,UACxCQ,aAAaS,YAAY,UACzBR,UAAUS,SAAS,UAhDL,EAACjC,KAAMe,kBACvBmB,cAAgBpB,0BAA0Bd,KAAMe,UAEhDoB,gBAAkBD,cAAchC,KAAKC,mBAAUiC,mBACrDD,gBAAgBH,YAAY,UAC5BK,KAAKC,OAAOH,uBAENI,gBAAkBL,cAAchC,KAAKC,mBAAUqC,oBACrDD,gBAAgBN,SAAS,UACzBI,KAAKI,KAAKF,kBAwCFG,CAAkB1C,KAAMe,WAExB4B,aAAaC,MAAM,yBAA0B,uCAGlDC,MAAMF,aAAaG,YASpBC,qBAAuB,CAAC/C,KAAMe,kBAC1BQ,aAAeF,2BAA2BrB,KAAMe,UAChDS,UAAYJ,wBAAwBpB,KAAMe,UAEhDU,wBAAwBzB,KAAMe,UAAU,GAAOW,MAAKC,UAC5CA,SACAC,OAAOC,QAAQC,aAAakB,YAAajC,UACzCQ,aAAaU,SAAS,UACtBT,UAAUQ,YAAY,UAzFR,EAAChC,KAAMe,kBACvBmB,cAAgBpB,0BAA0Bd,KAAMe,UAEhDoB,gBAAkBD,cAAchC,KAAKC,mBAAUiC,mBACrDD,gBAAgBF,SAAS,UACzBI,KAAKI,KAAKN,uBAEJI,gBAAkBL,cAAchC,KAAKC,mBAAUqC,oBACrDD,gBAAgBP,YAAY,UAC5BK,KAAKC,OAAOC,kBAiFJU,CAAkBjD,KAAMe,WAExB4B,aAAaC,MAAM,yBAA0B,uCAGlDC,MAAMF,aAAaG,YAUpBI,sBAAwB,CAAClD,KAAMe,WAC1Bf,KAAKE,KAAK,+CAAiDa,SAAW,MAU3EoC,sBAAwB,CAACnD,KAAMe,WAC1Bf,KAAKE,KAAK,+CAAiDa,SAAW,MAwD3EqC,qBAAuB,CAACrC,SAAUsC,WAGrB,IAAXA,SACAA,OAAS,OAGN,0EAAmDtC,UAAYsC,QACjER,MAAMF,aAAaG,YAUtBQ,2BAA6B,CAACtD,KAAMe,WAC/Bf,KAAKE,KAAK,oDAAsDa,SAAW,MAUhFwC,yBAA2B,CAACvD,KAAMe,WAC7Bf,KAAKE,KAAK,kDAAoDa,SAAW,MAuD9EyC,wBAA0B,CAACxD,KAAMe,SAAUsC,SACtCI,WAAWC,sBAAsB,CACpCC,QAAS,CACL,IACU5C,iBACKsC,WAGpB3B,MAAKkC,QAC2B,IAA3BA,OAAOC,SAASC,SAChBhE,UAAUE,KAAKO,KAAK,OAApB,YAA0CwD,SAAQC,aAC9CA,WAAWL,QAAQI,SAAQ,CAACE,OAAQ/C,SAC5B+C,OAAOC,IAAMnD,WACbiD,WAAWL,QAAQzC,OAAOiD,QAAUd,eAIzC,KAIZR,MAAMF,aAAaG,WASpBsB,YAAc,CAACpE,KAAMkE,YACjBG,UAAYrE,KAAKE,KAAK,8BACtBoE,OAASC,SAASF,UAAU9D,KAAK,gCAInCiE,cADe1E,UAAUE,KAAKO,KAAK,OAApB,YAA0C+D,QAC9BX,QAAQc,QAAO,CAACC,YAAaC,YACnDT,KAAQS,QAAQT,IACjBQ,YAAYE,KAAKD,SAEdD,cACR,YAGoE,IAA3D5E,UAAUE,KAAKO,KAAK,OAApB,YAA0C+D,OAAS,GAAqB,OAC1EO,WAAa/E,UAAUE,KAAKO,KAAK,OAApB,YAA0C+D,OAAS,GAAGX,QAAQmB,MAAM,EAAG,GAG1FhF,UAAUE,KAAKO,KAAK,OAApB,YAA0CwD,SAAQ,CAACC,WAAY9C,YACvDA,MAAQoD,OAAQ,KACZS,WAAa,QACqD,IAA1DjF,UAAUE,KAAKO,KAAK,OAApB,YAA0CW,MAAQ,KAC1D6D,WAAajF,UAAUE,KAAKO,KAAK,OAApB,YAA0CW,MAAQ,GAAGyC,QAAQmB,MAAM,EAAG,IAEvFhF,UAAUE,KAAKO,KAAK,OAApB,YAA0CW,OAAOyC,QAC7C,IAAI7D,UAAUE,KAAKO,KAAK,OAApB,YAA0CW,OAAOyC,QAAQmB,MAAM,MAAOC,gBAItFP,cAAgB,IAAIA,iBAAkBK,eAItC/E,UAAUE,KAAKO,KAAK,OAApB,WAA2C+D,OAAS,GACqB,IAAzExE,UAAUE,KAAKO,KAAK,OAApB,YAA0C+D,OAAS,GAAGX,QAAQG,OAAc,OACtEkB,sBAAwBhF,KAAKE,KAAK,2CACxC+E,oBAAoBC,qBAAoB,mBAAEF,uBAAuBzE,KAAK,MAAO+D,QAGjFxE,UAAUE,KAAKO,KAAK,OAApB,YAA0C+D,QAAQX,QAAUa,cAG5D1E,UAAUE,KAAKO,KAAK,OAApB,qBAGM4E,iBAAmBlE,yBAAyBjB,KAAMsE,QACxDc,cAAcpF,KAAMF,UAAUE,KAAKO,KAAK,OAApB,YAA0C+D,SAAS5C,MAAK,CAAC2D,KAAMC,KACxEC,UAAUC,oBAAoBL,iBAAkBE,KAAMC,MAC9DzC,MAAMF,aAAaG,WAGtBhD,UAAUE,KAAKO,KAAK,OAApB,YAA0CwD,SAAQ,CAACC,WAAY9C,YACvDA,MAAQoD,OAAQ,CACHrD,yBAAyBjB,KAAMkB,OACvCuE,cAaXhE,wBAA0B,CAACzB,KAAMe,SAAUsC,SAEtCI,WAAWiC,oBAAoB,CAClC/B,QAAS,CACL,IACU5C,mBACOsC,WAGtB3B,MAAKkC,QAC2B,IAA3BA,OAAOC,SAASC,SAChBhE,UAAUE,KAAKO,KAAK,OAApB,YAA0CwD,SAAQC,aAC9CA,WAAWL,QAAQI,SAAQ,CAACE,OAAQ/C,SAC5B+C,OAAOC,IAAMnD,WACbiD,WAAWL,QAAQzC,OAAOyE,YAActC,eAI7C,KAIZR,MAAMF,aAAaG,WASpB8C,gBAAkB5F,aACd6F,aAAe7F,KAAKE,KAAKC,mBAAUC,WAAWC,QAAQE,KAAK,qBAC3DuF,aAAe9F,KAAKE,KAAKC,mBAAUC,WAAWC,QAAQE,KAAK,4BAC1DgF,UAAUQ,OAAOpG,oBAAqB,CACzCkG,aAAcA,aACdC,aAAcA,gBAWhBV,cAAgB,CAACpF,KAAMgG,qBAEnBC,QAAUlG,gBAAgBC,UAE5BkG,gBAAkB,UAElBA,gBADoB,SAApBD,QAAQzF,QACUb,wBACS,SAApBsG,QAAQzF,QACGb,uBAEAA,0BAGjBqG,cAI0C,IAAvCG,MAAMC,QAAQJ,YAAYrC,WAC1BqC,YAAYrC,QAAU0C,OAAOC,OAAON,YAAYrC,UAIpDqC,YAAYrC,QAAUqC,YAAYrC,QAAQ4C,KAAItC,SAC1CA,OAAOuC,mBAAmD,OAA9BP,QAAQtF,kBAC7BsD,UAGP+B,YAAYrC,QAAQG,OACbyB,UAAUQ,OAAOG,gBAAiB,CACrCvC,QAASqC,YAAYrC,UAGlBiC,gBAAgB5F,OAlBpB4F,gBAAgB5F,OAyCzByG,2BAA6B,CAACzG,KAAM0G,mBAChCC,MAAQD,UAAYE,mBAAmBC,yBAC7CjF,OAAOkF,UAAUH,MAdJ3G,CAAAA,MAEN+G,OAAS/G,KAAKE,KAAKC,mBAAUC,WAAWC,QAAQE,KAAK,cAAewG,OAYnDC,CAAShH,QAU/BiH,iBAAmB,CAACC,YAAalH,YAC/BmH,aAAetH,mBAAmB0G,KAAIa,YAClCC,QAAS,SACTD,QAAUF,cACVG,QAAS,GAGN,CACHD,MAAOA,MACPC,OAAQA,iBAKVC,iBAAmB/C,SAASvE,KAAKE,KAAKC,mBAAUC,WAAWC,QAAQE,KAAK,yBAA0B,WACjG4G,aAAaI,QAAOC,gBACI,IAAvBA,aAAaJ,OAAeE,iBAAmB,MAI5CE,aAAaJ,MAAQE,oBAc9BG,YAAc,SAACzH,KAAMgG,YAAa0B,YAAaC,SAAUC,aAASC,oEAAe,KAE/ElE,QAAUqC,YAAYrC,QAAUqC,YAAYrC,QAAUqC,YACtD8B,cAAgB,EAChBC,YAAc,WAGsD,IAA5DjI,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,aAA+B,CACjFK,YAAcjI,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,aAAa/D,cAC/DqE,kBAAoBD,YAAYjE,OAClCkE,kBAAoBL,SAASZ,QAC7Be,cAAgBH,SAASZ,MAAQiB,kBACjCD,YAAc,IAAIjI,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,aAAa/D,WAAYA,QAAQmB,MAAM,EAAGgD,sBAI1GA,cAAgBH,SAASZ,QAAS,EAClCgB,YAAeJ,SAASZ,MAAQ,EAAKpD,QAAQmB,MAAM,EAAG6C,SAASZ,OAASpD,QAI5E7D,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,aAAe,CACrD/D,QAASoE,mBAIPE,kBAAqC,IAAlBH,cAA0BnE,QAAQmB,MAAMgD,cAAenE,QAAQG,QAAU,GAC9FmE,iBAAiBnE,SACjBhE,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,YAAc,GAAK,CACzD/D,QAASsE,mBAKbnI,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,aAAa/D,QAAQG,OAAS6D,SAASZ,QAAUkB,iBAAiBnE,QAC5GhE,UAAUE,KAAKO,KAAK,OAApB,SAAyCmH,YACpB,OAAjBG,cACAD,QAAQM,eAAeR,mBAEoD,IAAhE5H,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,YAAc,IACpE5H,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,YAAc,GAAG/D,QAAQG,OAAS6D,SAASZ,QACxFjH,UAAUE,KAAKO,KAAK,OAApB,SAAyCmH,YAAc,GAG3D5H,UAAUE,KAAKO,KAAK,OAApB,aAA6CyF,YAAYmC,YAOvDC,aAAgBpI,OAClBF,UAAUE,KAAKO,KAAK,OAApB,aAA6C,EAC7CT,UAAUE,KAAKO,KAAK,OAApB,YAA4C,GAC5CT,UAAUE,KAAKO,KAAK,OAApB,SAAyC,EACzCT,UAAUE,KAAKO,KAAK,OAApB,UAA0C,GASxC8H,2BAA8BrI,OAChCoI,aAAapI,MACN,CAACiG,QAASyB,YAAaC,SAAUC,QAAS5H,KAAMsI,SAAUvB,eACvDwB,YAloBO,EAACvI,KAAMiG,QAASc,QAC1BtD,WAAW+E,yBAAyB,CACvClI,KAAM2F,QAAQ3F,KACdmI,OAAQ3I,UAAUE,KAAKO,KAAK,OAApB,aACRwG,MAAOA,MACP2B,eAAgBzC,QAAQxF,SACxBC,KAAMuF,QAAQvF,KACdE,gBAAiBqF,QAAQrF,gBACzBC,iBAAkBoF,QAAQpF,mBA0nBN8H,CAChB3I,KACAiG,QACAc,OACFrF,MAAKsE,cACHyB,YAAYzH,KAAMgG,YAAa0B,YAAaC,SAAUC,SAC/CxC,cAAcpF,KAAMF,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,iBACtE7E,MAAMF,aAAaG,WAEtBwF,SAAS1D,KAAK2D,eAUhBK,yBAA4B5I,OAC9BoI,aAAapI,MACN,CAACiG,QAASyB,YAAaC,SAAUC,QAAS5H,KAAMsI,SAAUvB,MAAO8B,oBAC9DC,iBAnoBa,EAAC9I,KAAMiG,QAASc,MAAOgC,cACvCtF,WAAW+E,yBAAyB,CACvClI,KAAM2F,QAAQ3F,KACdmI,OAAQ3I,UAAUE,KAAKO,KAAK,OAApB,aACRwG,MAAOA,MACP2B,eAAgB,SAChBhI,KAAMuF,QAAQvF,KACdE,gBAAiBqF,QAAQrF,gBACzBC,iBAAkBoF,QAAQpF,iBAC1BmI,YAAaD,cA0nBYE,CACrBjJ,KACAiG,QACAc,MACA8B,YACFnH,MAAKsE,cACHyB,YAAYzH,KAAMgG,YAAa0B,YAAaC,SAAUC,SAC/CxC,cAAcpF,KAAMF,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,iBACtE7E,MAAMF,aAAaG,WAEtBwF,SAAS1D,KAAKkE,oBAWhBI,uBAAyB,SAAClJ,KAAMmJ,qBAAiBN,kEAAa,WAC1D3B,YAAc3C,SAASvE,KAAKE,KAAKC,mBAAUC,WAAWC,QAAQE,KAAK,eAAgB,QACrF4G,aAAeF,iBAAiBC,YAAalH,MAI7CoJ,6BAA+B,CAC/BC,2BAA2B,EAC3BC,wBAAwB,EACxBC,mBAAoB,0CAA4CvJ,KAAKO,KAAKJ,mBAAUqJ,iBAGlFvD,QAAUlG,gBAAgBC,MAC1ByJ,OAAS,IAAWL,8BAC1BK,OAAOC,eAAiB5J,UAAUE,KAAKO,KAAK,OAApB,gBAElBoJ,oBAAsB1E,oBAAoB2E,gBAC5CzC,cACA,CAAC0C,UAAWjC,eACJU,SAAW,UACfuB,UAAU9F,SAAQ4D,iBACRD,YAAcC,SAASmC,eACzB/C,MAASY,SAASZ,MAAQ,EAAKY,SAASZ,MAAQ,MAG/CjH,UAAUE,KAAKO,KAAK,OAApB,YAA6CwG,QAC9CjH,UAAUE,KAAKO,KAAK,OAApB,YAA4C,GAC5CT,UAAUE,KAAKO,KAAK,OAApB,aAA6C,EAC7CT,UAAUE,KAAKO,KAAK,OAApB,SAAyC,GAGzCT,UAAUE,KAAKO,KAAK,OAApB,WAA2CmH,mBAE3CE,QAAQM,eAAepI,UAAUE,KAAKO,KAAK,OAApB,eACvB+H,SAAS1D,KAAKQ,cAAcpF,KAAMF,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,eAIhF5H,UAAUE,KAAKO,KAAK,OAApB,UAA0CwG,WAGkC,IAAhEjH,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,YAAc,SACQ,IAA5D5H,UAAUE,KAAKO,KAAK,OAApB,YAA0CmH,eAClDX,OAAS,GAKjBoC,gBAAgBlD,QAASyB,YAAaC,SAAUC,QAAS5H,KAAMsI,SAAUvB,MAAO8B,eAE7EP,WAEXmB,QAGJE,oBAAoBjI,MAAK,CAAC2D,KAAMC,MAC5BmB,2BAA2BzG,KAAMF,UAAUE,KAAKO,KAAK,OAApB,WAC1BgF,UAAUC,oBAAoBxF,KAAKE,KAAKC,mBAAUC,WAAWC,QAASgF,KAAMC,OACpFzC,MAAMF,aAAaG,YASpBiH,uBAAyB,CAAC/J,KAAMgK,QAElCC,aAAaC,OAAOlK,KAAM,CACtBiK,aAAaE,OAAOC,WAGxBpK,KAAKqK,GAAGJ,aAAaE,OAAOC,SAAUjK,mBAAUmK,sBAAsB,CAACC,EAAGC,cAChEC,WAAY,mBAAEF,EAAEG,QAAQC,QAAQxK,mBAAUmK,sBAC1CvJ,SAAWI,YAAYsJ,WAC7BnJ,gBAAgBtB,KAAMe,UACtByJ,KAAKI,cAAcC,oBAGvB7K,KAAKqK,GAAGJ,aAAaE,OAAOC,SAAUjK,mBAAU2K,yBAAyB,CAACP,EAAGC,cACnEC,WAAY,mBAAEF,EAAEG,QAAQC,QAAQxK,mBAAU2K,yBAC1C/J,SAAWI,YAAYsJ,WAC7B1H,qBAAqB/C,KAAMe,UAC3ByJ,KAAKI,cAAcC,oBAGvB7K,KAAKqK,GAAGJ,aAAaE,OAAOC,SAAUjK,mBAAUa,gBAAgB,CAACuJ,EAAGC,QAChEA,KAAKI,cAAcC,oBAGvB7K,KAAKqK,GAAGJ,aAAaE,OAAOC,SAAUjK,mBAAU4K,oBAAoB,CAACR,EAAGC,cAC9DE,QAAS,mBAAEH,EAAEG,QAAQC,QAAQxK,mBAAU4K,oBACvChK,SAAWI,YAAYuJ,QApkBlB,EAAC1K,KAAMe,kBAChBiK,WAAa9H,sBAAsBlD,KAAMe,UACzCkK,WAAa9H,sBAAsBnD,KAAMe,UACzCkF,QAAUlG,gBAAgBC,MAEhCoD,qBAAqBrC,UAAU,GAI3BkF,QAAQxF,WAAab,uCACrBwE,YAAYpE,KAAMe,UAGtBiK,WAAW/I,SAAS,UACpBgJ,WAAWjJ,YAAY,WAujBnBkJ,CAAWlL,KAAMe,UACjByJ,KAAKI,cAAcC,oBAGvB7K,KAAKqK,GAAGJ,aAAaE,OAAOC,SAAUjK,mBAAUgL,oBAAoB,CAACZ,EAAGC,cAC9DE,QAAS,mBAAEH,EAAEG,QAAQC,QAAQxK,mBAAUgL,oBACvCpK,SAAWI,YAAYuJ,QApjBlB,EAAC1K,KAAMe,kBAChBiK,WAAa9H,sBAAsBlD,KAAMe,UACzCkK,WAAa9H,sBAAsBnD,KAAMe,UACzCkF,QAAUlG,gBAAgBC,MAEhCoD,qBAAqBrC,SAAU,MAI3BkF,QAAQxF,WAAab,uCACrBwE,YAAYpE,KAAMe,UAGtBiK,WAAWhJ,YAAY,UACvBiJ,WAAWhJ,SAAS,WAuiBhBmJ,CAAWpL,KAAMe,UACjByJ,KAAKI,cAAcC,0BAIjBQ,MAAQrB,KAAKsB,cAAcnL,mBAAUE,OAAOkL,aAC5CC,UAAYxB,KAAKsB,cAAcnL,mBAAUE,OAAOmL,WAEtDA,UAAUC,iBAAiB,SAAS,KAChCJ,MAAMjE,MAAQ,GACdiE,MAAMK,QACNC,YAAYH,UAAWxL,SAG3BqL,MAAMI,iBAAiB,SAAS,oBAAS,KACjB,KAAhBJ,MAAMjE,MACNuE,YAAYH,UAAWxL,OAEvB6H,aAAa2D,WACbtC,uBAAuBlJ,KAAM4I,yBAAyB5I,MAAOqL,MAAMjE,MAAMwE,WAE9E,OASDC,8BAAgC,CAAC7L,KAAMgK,QAEzCC,aAAaC,OAAOlK,KAAM,CACtBiK,aAAaE,OAAOC,WAGxBpK,KAAKqK,GAAGJ,aAAaE,OAAOC,SAAUjK,mBAAU2L,yBAAyB,CAACvB,EAAGC,cACnEE,QAAS,mBAAEH,EAAEG,QAAQC,QAAQxK,mBAAU2L,yBACvC/K,SAAWI,YAAYuJ,QA5hBb,EAAC1K,KAAMe,kBACrBiK,WAAa1H,2BAA2BtD,KAAMe,UAC9CkK,WAAa1H,yBAAyBvD,KAAMe,UAElDyC,wBAAwBxD,KAAMe,SAAU,GAAGW,MAAKC,UACxCA,SACAqJ,WAAW/I,SAAS,UACpBgJ,WAAWjJ,YAAY,UACvB+J,MAAM/L,OAEN2C,aAAaC,MAAM,uBAAwB,wCAGhDC,MAAMF,aAAaG,YAghBlBkJ,CAAgBhM,KAAMe,UACtByJ,KAAKI,cAAcC,oBAGvB7K,KAAKqK,GAAGJ,aAAaE,OAAOC,SAAUjK,mBAAU8L,uBAAuB,CAAC1B,EAAGC,cACjEE,QAAS,mBAAEH,EAAEG,QAAQC,QAAQxK,mBAAU8L,uBACvClL,SAAWI,YAAYuJ,QA7gBf,EAAC1K,KAAMe,kBACnBiK,WAAa1H,2BAA2BtD,KAAMe,UAC9CkK,WAAa1H,yBAAyBvD,KAAMe,UAElDyC,wBAAwBxD,KAAMe,SAAU,GAAGW,MAAKC,UACxCA,SACAqJ,WAAWhJ,YAAY,UACvBiJ,WAAWhJ,SAAS,UACpB8J,MAAM/L,OAEN2C,aAAaC,MAAM,wBAAyB,wCAGjDC,MAAMF,aAAaG,YAigBlBoJ,CAAclM,KAAMe,UACpByJ,KAAKI,cAAcC,0BAIjBQ,MAAQrB,KAAKsB,cAAcnL,mBAAUE,OAAOkL,aAC5CC,UAAYxB,KAAKsB,cAAcnL,mBAAUE,OAAOmL,WAEtDA,UAAUC,iBAAiB,SAAS,KAChCJ,MAAMjE,MAAQ,GACdiE,MAAMK,QACNC,YAAYH,UAAWxL,SAG3BqL,MAAMI,iBAAiB,SAAS,oBAAS,KACjB,KAAhBJ,MAAMjE,MACNuE,YAAYH,UAAWxL,OAEvB6H,aAAa2D,WACbtC,uBAAuBlJ,KAAM4I,yBAAyB5I,MAAOqL,MAAMjE,MAAMwE,WAE9E,OASMD,YAAc,CAACH,UAAWxL,QACnCwL,UAAUW,UAAUC,IAAI,UACxBC,KAAKrM,8CAQH6H,aAAgB2D,YAClBA,UAAUW,UAAU1G,OAAO,WAQlB4G,KAAOrM,OAChBA,MAAO,mBAAEA,MAETF,UAAUE,KAAKO,KAAK,OAAS,GAC7BT,UAAUE,KAAKO,KAAK,OAApB,YAA4C,GAC5CT,UAAUE,KAAKO,KAAK,OAApB,SAAyC,EACzCT,UAAUE,KAAKO,KAAK,OAApB,aAA6C,MAGzCD,KADiBN,KAAKE,KAAKC,mBAAUC,WAAWC,QAC5BE,KAAK,sBAExBP,KAAKO,KAAK,aAAc,OACnByJ,KAAOsC,SAAShB,cAAc,IAAMtL,KAAKO,KAAK,MAAQJ,mBAAUE,OAAOkM,aA55BhE,YA65BTjM,KACAyJ,uBAAuB/J,KAAMgK,MAE7B6B,8BAA8B7L,KAAMgK,MAGxClK,UAAUE,KAAKO,KAAK,OAApB,UAA0C,mBAAqBP,KAAKO,KAAK,MAAQ,IAAMiM,KAAKC,SAC5FzM,KAAKO,KAAK,aAAa,GAG3B2I,uBAAuBlJ,KAAMqI,2BAA2BrI,iCAY/C+L,MAAQ/L,OACbF,UAAUE,KAAKO,KAAK,OAApB,YAA0CuD,OAAS,EACnDhE,UAAUE,KAAKO,KAAK,OAApB,YAA0CwD,SAAQ,CAACC,WAAY9C,aACvDiE,iBAAmBlE,yBAAyBjB,KAAMkB,OACtDkE,cAAcpF,KAAMgE,YAAYtC,MAAK,CAAC2D,KAAMC,KACjCC,UAAUC,oBAAoBL,iBAAkBE,KAAMC,MAC9DzC,MAAMF,aAAaG,cAG1BuJ,KAAKrM"}